<html>
<head>
<title>Бьярн Страустрап. Введение в язык Си++, Операторы</title>
		    <style type="text/css">
TH.arial { font-family: Arial, Serif;}
P.topic { font-family: sans-serif;}
A.plain { text-decoration: none;}
A.topic01 { color: #006890;
font-family: sans-serif;
text-decoration: none;}
A.topic02 { color: #099771;
font-family: sans-serif;
text-decoration: none;}
A.topic03 { color: #719709;
font-family: sans-serif;
text-decoration: none;}
A.topic04 { color: #98650A;
font-family: sans-serif;
text-decoration: none;}
A.topic05 { color: #98340A;
font-family: sans-serif;
text-decoration: none;}
A.topic06 { color: #099607;
font-family: sans-serif;
text-decoration: none;}
A.topic07 { color: #9E1215;
font-family: sans-serif;
text-decoration: none;}
A.topic08 { color: #970941;
font-family: sans-serif;
text-decoration: none;}
A.topic09 { color: #950995;
font-family: sans-serif;
text-decoration: none;}
A.topic010 { color: #390A98;
font-family: sans-serif;
text-decoration: none;}
H1 { font-family: sans-serif;}
H2 { font-family: sans-serif;}
H3 { font-family: sans-serif;}
H4 { font-family: sans-serif;}
H5 { font-family: sans-serif;}
H6 { font-family: sans-serif;}
</style>
</head>
<body bgcolor="#FFFFFF" link="#006890" vlink="#003860" alink="#800000" text="#000000">
<table cellspacing=0 cellpadding=0 border=0 background="../../PICTURES/MENU/HEADER0.JPG" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<img src="../../PICTURES/MENU/LOGO.GIF" width=157 height=53 border=0 alt="Server for Information Technologies">
</td><td align="right">
<font size="-2">Сервер поддерживается<br><a class="plain" href="http://www.citmgu.ru">Центром Информационных Технологий</a><br>(095) 932-9212, 932-9213, 939-0783<br>E-mail: <a class=noneline href="mailto:info@citmgu.ru?Subject='From page topic CIT FORUM local copy'">info@citforum.ru</a></font>
</td></tr>
</table>
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="left">
<font size="-1">Сервер содержит море(!) аналитической информации</font>
</td><td align="right">
<font size="-1">CIT Forum CD-ROM</font>
</td></tr>
</table>
</td></tr>
</table>
<a name=ref9_18>
<h2 align=center>           9. Операторы </h2>
<p>  Операторы выполняются последовательно во всех случаях кроме особо
оговоренных.
<a name=ref9_18.9.1>
<h3 align=center>                9.1 Оператор выражение </h3>
<p>  Большинство операторов  является операторами  выражение,  которые
имеют вид выражение ;
<br>  Обычно операторы  выражение являются  присваиваниями  и  вызовами
функций.
<a name=ref9_18.9.2>
<h3 align=center>   9.2 Составной оператор, или блок </h3>
<p>  Составной оператор  (называемый также  "блок", что  эквивалентно)
дает возможность использовать несколько операторов в том месте, где
предполагается использование одного:
<pre>
     составной_оператор:
          { список_описаний opt список_операторов opt }
     список_описаний:
          описание
          описание список_описаний
     список_операторов:
          оператор
          оператор список_операторов
</pre>  
<br>Если какой-либо  из идентификаторов  в списке_описаний  был ранее
описан, то  внешнее описание  выталкивается  на  время  выполнения
блока, и снова входит в силу по его окончании.
  Каждая инициализация  auto или   register переменных производится
всякий раз при входе в голову блока. В блок делать передачу; в этом
случае  инициализации  не  выполняются.  Инициализации  переменных,
имеющих класс памяти static (<a HREF=REF1_7.HTM#ref1_7.4.2>#4.2</a>) осуществляются только один раз в начале выполнения программы.
<a name=ref9_18.9.3>
<h3 align=center>    9.3 Условный оператор </h3>
<p>  Есть два вида условных операторов
<pre>
     if ( выражение ) оператор 
     if ( выражение ) оператор else оператор
</pre>
<br>  В обоих  случаях вычисляется  выражение, и  если оно  не ноль, то
выполняется первый подоператор. Во втором случае второй подоператор
выполняется, если  выражение есть  0. Как  обычно,  неоднозначность
"else"  разрешается   посредством  того,  что  else  связывается  с
последним встречным if, не имеющим else.
<a name=ref9_18.9.4>
<h3 align=center>    9.4 Оператор while </h3>
<p>  Оператор while имеет вид
<pre>
     while ( выражение ) оператор
</pre>
<br>Выполнение   подоператора повторяется,  пока  значение  выражения
остается ненулевым.  Проверка выполняется  перед каждым  выполнением
оператора.
<a name=ref9_18.9.5>
<h3 align=center>   9.5 Оператор do </h3>
<p>  Оператор do имеет вид
 <pre>
    do оператор while (выражение);
</pre>
<br>   Выполнение   подоператора  повторяется до тех пор, пока значение
выражения не  станет  нулем.  Проверка  выполняется  после  каждого
выполнения оператора.
<a name=ref9_18.9.6>
<h3 align=center>     9.6 Оператор for </h3>
<p>  Оператор for имеет вид
<pre>
     for (  выражение_1 opt  ; выражение_2  opt ; выражение_3 opt )
          оператор
</pre>
<br>   Этот оператор эквивалентен следующему:
<pre>
     выражение_1;
     while    (выражение_2)
                  {
                   оператор
                                выражение_3;
                   }
</pre>
<br>  Первое выражение  задает инициализацию  цикла;  второе  выражение
задает осуществляемую  перед каждой  итерацией проверку, по которой
производится выход  из  цикла,  если  выражение  становится  нулем;
третье выражение  часто задает приращение, выполняемое после каждой
итерации.
<br>  Каждое  или   все  выражения   могут  быть   опущены.  Отсутствие
выражения_2 делает  подразумеваемое while-предложение  эквивалентным
while(1);  остальные  опущенные  выражения  просто  пропускаются  в
описанном выше расширении.
<a name=ref9_18.9.7>
<h3 align=center>   9.7 Оператор switch </h3>
<p>  Оператор  switch   вызывает  передачу   управления  на   один  из
нескольких операторов в зависимости от значения выражения. Он имеет
вид
<pre>
     switch ( выражение ) оператор
</pre>
<br>   Выражение  должно быть  целого типа  или типа  указателя.  Любой
оператор внутри  оператора  может  быть  помечен  одним  или  более
префиксом case следующим образом:
<pre>
     case      константное_выражение :
</pre>
<br>где константное  выражение должно иметь тот же тип что и выражение-
переключатель; производятся  обычные арифметические преобразования.
В одном операторе switch никакие две константы, помеченные case, не
могут  иметь   одинаковое  значение.  Константные  выражения  точно
определяются в <a HREF=#ref9_18.15>#15.</a>
<br>  Может также быть не более чем один префикс оператора вида
<pre>
     default :
</pre>
<br>  Когда  выполнен   оператор  switch,   проведено  вычисление   его
выражения и  сравнение его  с каждой  case константой. Если одна из
констант равна  значению выражения,  то  управление  передается  на
выражение, следующее  за подошедшим  префиксом case.  Если  никакая
case константа  не соответствует выражению, и есть префикс default,
то управление  передается на  выражение, которому  он предшествует.
Если нет  соответствующих вариантов  case  и default отсутствует, то
никакой из операторов в операторе switch не выполняется.
<br>  Префиксы  case    и  default  сами  по  себе  не  изменяют  поток
управления, который  после задержки  идет дальше, перескакивая через
эти префиксы. Для выхода из switch см. break, <a HREF=#ref9_18.9.8>#9.8.</a>
<br>  Обычно зависящий  от switch оператор является составным. В голове
этого   оператора   могут   стоять   описания,   но   инициализации
автоматических и регистровых переменных являются безрезультатными.
<a name=ref9_18.9.8>
<h3 align=center>     9.8 Оператор break </h3>
<p>  Оператор
<pre>
     break ;
</pre>
<br>прекращает выполнение  ближайшего охватывающего while,  do, for или
switch   оператора; управление передается на оператор, следующий за
законченным.
<a name=ref9_18.9.9>
<h3 align=center>     9.9 Оператор continue </h3>
<p>  Оператор
<pre>
  continue ;
</pre>
<br>вызывает передачу  управления  на  управляющую  продолжением  цикла
часть наименьшего  охватывающего оператора  while, do  или for;  то
есть на конец петли цикла. Точнее, в каждом из операторов
<p><table width=100% border=0>
<TR><TD><pre>while (...)</pre></TD><TD><pre>do</pre></TD><TD><pre> for (...)</pre></TD>
<TR><TD><pre>{    </pre></TD><TD> <pre>{ </pre></TD><TD> <pre>{  </pre></td>
<TR><TD><pre>  ... </pre></td><TD> <pre>   ... </pre> </TD><TD><pre>   ... </pre></TD>
<TR><TD><pre>contin:;</pre></TD><TD><pre>contin:;</pre></TD><TD> <pre>contin:; </pre></TD>
<TR><TD> <pre>}    </pre> </TD><TD><pre>}    </pre></TD><TD>   <pre>} </pre></TD>
<TR><TD></TD><TD>           <pre>while (...);</pre> </TD><TD></TD>
</table>
<br>continue эквивалентно  goto  contin.  (За  contin:  следует  пустой
оператор, <a HREF=#ref9_18.9.13>#9.13.</a>)
<a name=ref9_18.9.10>
<h3 align=center>    9.10 Оператор return </h3>
<p>  Возврат из  функции  в  вызывающую  программу  осуществляется  с
помощью оператора return, имеющего один из двух видов:
<pre>
      return ;
      return выражение ;
</pre>
<br>   Первый  может использоваться  только в функциях, не возвращающих
значения, т.е.  в функциях  с типом  возвращаемого  значения  void.
Вторая  форма   может  использоваться   только   в   функциях,   не
возвращающих значение;  вызывающей функцию  программе  возвращается
значение выражения.  Если необходимо,  то выражение  преобразуется,
как это  делается при  присваивании, к  типу функции, в которой оно
возникло. Обход  конца функции  эквивалентен  возврату  return  без
возвращаемого значения.
<a name=ref9_18.9.11>
<h3 align=center>     9.11 Оператор goto </h3>
<p>  Можно  осуществлять  безусловную  передачу  управления  с  помощью
оператора
<pre>
      goto идентификатор ;
</pre>  
<br>  Идентификатор  должен  быть  меткой    (<a HREF=#ref9_18.9.12>#9.12</a>),  расположенной  в
текущей функции.
<a name=ref9_18.9.12>
<h3 align=center>    9.12 Помеченные операторы </h3>
<p> Перед любым оператором может стоять префикс метка, имеющий вид
<pre> 
    идентификатор :
</pre>  
<br>который  служит   для  описания  идентификатора  как  метки.  Метка
используется только  как объект  для goto. Областью видимости метки
является текущая  функция, исключая  любой подблок,  в котором  был
переписан такой же идентификатор. См. <a HREF=REF1_7.HTM#ref1_7.4.1>#4.1.</a>
<a name=ref9_18.9.13>
<h3 align=center>   9.13 Пустой оператор </h3>
<p>  Пустой оператор имеет вид
<pre> 
    ;
</pre>  
<br>  Пустой оператор  используется для помещения метки непосредственно
перед  }  составного  оператора  или  того,  чтобы  снабдить  такие
операторы, как while, пустым телом.
<a name=ref9_18.9.14>
<h3 align=center>    9.14 Оператор delete </h3>
<p>  Оператор delete имеет вид
<pre>
     delete выражение ;
</pre>  
<br>  Результатом выражения  должен быть  указатель. Объект, на который
он  указывает,   уничтожается.  Это  значит,  что  после  оператора
уничтожения  delete   нельзя  гарантировать,   что   объект   имеет
определенное значение;  см. <a HREF=#ref9_18.17>#17.</a>  Эффект от  применения  delete    к указателю, не  полученному из  операции new   (<a HREF=REF1_7.HTM#ref1_7.7.1>#7.1</a>),  не определен.
Однако, уничтожение указателя с нулевым значением безопасно.
<a name=ref9_18.9.15>
<h3 align=center>    9.15 Оператор asm </h3>
<p>  Оператор asm имеет вид
<pre>
     asm ( строка) ;
</pre>  
<br>  Смысл оператора  asm  не определен.  Обычно  он  используется  для
передачи информации через компилятор ассемблеру.
<a name=ref9_18.10>
<h2 align=center>    10. Внешние Определения </h2>
<p>  Программа  на   C++   состоит   из   последовательности   внешних
определений.  Внешнее   определение  описывает  идентификатор  как
имеющий класс памяти static и определяет его тип. Спецификатор типа
(<a HREF=REF8.HTM#ref8.2>#8.2</a>) может  также быть  пустым, и  в этом случае принимается  тип int. Область  видимости внешних  определений простирается  до конца файла, в  котором  они  описаны,  так  же,  как  действие  описаний сохраняется до  конца блока.  Синтаксис внешних определений тот же, что и  у описаний, за исключением того, что только на этом уровне и
внутри описаний  классов может  быть задан  код  (текст  программы)
функции.
<a name=ref9_18.10.1>
<h3 align=center>    10.1  Определения функций </h3>
<p>  Определения функций имеют вид
<pre> 
    определение_функции:
          спецификаторы_описания описатель_функции  opt инициализатор_базового_класса opt
          тело_функции
</pre>  
<br>  Единственными cпецификаторами класса памяти (sc-cпецификаторами),
допустимыми  среди   спецификаторов  описания,   являются   extern,
static, overload,   inline  и virtual.   Описатель функции похож на
описатель "функции,  возвращающей ...", за исключением того, что он
включает в  себя имена  формальных параметров определяемой функции.
<br>Описатель функции имеет вид
<pre>
     описатель_функции:
          описатель ( список_описаний_параметров )
</pre>  
<br>  Форма списка описаний параметров определена в <a HREF=REF8.HTM#ref8.4>#8.4.</a>  Единственный класс памяти,  который может  быть  задан,  это  тот,  при  котором соответствующий фактический  параметр будет  скопирован,  если  это возможно,  в   регистр  при   входе  в  функцию.  Если  в  качестве инициализатора для  параметра задано  константное выражение, то это
значение используется как значение параметра по умолчанию.
<br>  Тело функции имеет вид
<pre>
     тело_функции:
          составной_оператор
</pre>  
<br>  Вот простой пример полного определения функции:
<pre>
  int max (int a,int b,int c)
    {
      int m = (a > b) ? a : b;
      return  (m > c) ? m : c;
    }
</pre>  
<br>  Здесь int  является спецификатором  типа ; max (int a, int b, int
c) является  описателем функции  ; {  ... }  - блок, задающий текст
программы (код) оператора.
<br>  Поскольку в  контексте выражения  имя (точнее, имя как формальный
параметр) считается означающим указатель на первый элемент массива,
то описания  формальных параметров,  описанных как "массив из ...",
корректируются так, чтобы читалось "указатель на ...".
<br>  Инициализатор базового класса имеет вид
<pre>
     инициализатор_базового_класса:
          : ( список_параметров opt )
</pre>  
<br> Он  используется  для  задания  параметров  конструктора  базового
класса в конструкторе производного класса. Например:
<pre>
  struct base { base (int); ... };
  struct derived : base { derived (int); ... };
  derived.derived (int a) : (a+1) { ... }
  derived d (10);
</pre>  
<br>Конструктор базового  класса вызывается  для объекта d с параметром
11.
<a name=ref9_18.10.2>
<h3 align=center>    10.2 Определения внешних данных </h3>
<p>  Определения внешних данных имеют вид
<pre>
     определение_данных:
          описание
</pre>  
<br>  Класс памяти таких данных статический.
<br>  Если есть  более одного определения внешних данных одного имени,
то определения  должны  точно  согласовываться  по  типу  и  классу
памяти, и  инициализаторы (если  они есть), должны иметь одинаковое
значение.
<a name=ref9_18.11>
<h2 align=center>          11. Правила Области Видимости </h2>
<p>  См. <a HREF=REF1_7.HTM#ref1_7.4.1>#4.1.</a>
<a name=ref9_18.12>
<h2 align=center>         12. Командные Строки Компилятора </h2>
<p>  Компилятор языка  C++ содержит  препроцессор, способный выполнять
макроподстановки,  условную   компиляцию  и  включение  именованных
файлов. Строки,  начинающиеся с  #, относятся  к препроцессору. Эти
строки имеют  независимый от  остального языка синтаксис; они могут
появляться   в    любом   месте    оказывать    влияние,    которое
распространяется  (независимо   от  области   видимости)  до  конца
исходного файла программы.
<br>  Заметьте, что  определения const  и inline  дают альтернативы для
большинства использований #define.
<a name=ref9_18.12.1>
<h3 align=center>   12.1 Замена идентификаторов </h3>
<p>  Командная строка компилятора имеет вид
<pre>
     #define идент строка_символов
</pre>  
<br>вызывает    замену     препроцессором     последующих     вхождений
идентификатора, заданного  строкой символов. Точка с запятой внутри
(или в конце) строки символов является частью этой строки.
<br>  Строка вида
<pre>
     #define идент( идент , ..., идент ) строка_символов
</pre>  
<br>где отсутствует  пробел между  первым идентификатором  и (, является
макроопределением  с  параметрами.  Последующие  вхождения  первого
идентификатора с  идущими за  ним (,  последовательностью символов,
разграниченной запятыми, и ), заменяются строкой символов, заданной
в определении.  Каждое местоположение идентификатора, замеченного в
списке параметров  определения, заменяется  соответствующей строкой
из  вызова.   Фактическими  параметрами   вызова  являются   строки
символов,  разделенные   запятыми;   однако   запятые   в   строке,
заключенной  в   кавычки,  или   в  круглых   скобках  не  являются
разделителями параметров. Число формальных и фактических параметров
должно совпадать. Строки и символьные константы в символьной строке
сканируются в поисках формальных параметров, но строки и символьные
константы  в   остальной  программе   не  сканируются   в   поисках
определенных (с помощью define) идентификаторов.
<br>  В обоих  случаях строка  замещения еще  раз сканируется в поисках
других  определенных   идентификаторов.  В   обоих  случаях  длинное
определение может быть продолжено на другой строке с помощью записи
\ в конце продолжаемой строки.
<br>  Командная строка вида
<pre>
     #undef идент
</pre>  
<br>влечет отмену препроцессорного определения идентификатора.
<a name=ref9_18.12.2>
<h3 align=center>  12.2 Включение файлов </h3>
<p>  Командная строка компилятора вида
<pre>
     #include "имя_файла"
</pre>  
<br>вызывает замену  этой строки  полным  содержимым  файла  имя_файла.
Сначала  именованный   файл  ищется  в  директории  первоначального
исходного  файла,  а  затем  в  стандартных  или  заданных  местах.
<br>Альтернативный вариант, командная строка вида
<pre>
      #include <имя_файла>
</pre>  
<br>производит поиск только в стандартном или заданном месте, и не ищет
в директории  первоначального исходного  файла. (То,  как эти места
задаются, не является частью языка.)
<br>  Включения с помощью #include могут быть вложенными.
<a name=ref9_18.12.3>
<h3 align=center>   12.3 Условная компиляция </h3>
<p>  Командная строка компилятора вида
<pre>
     #if выражение
</pre>  
<br>проверяет, является  ли результатом  вычисления выражения  не-ноль.
Выражение должно быть константным выражением, которые обсуждаются в
<a HREF=#ref9_18.15>#15</a>;  применительно   к   использованию   данной   директивы   есть дополнительные  ограничения:   константное   выражение   не   может содержать sizeof или перечислимые константы. Кроме обычных операций C     может  использоваться  унарная  операция  defined.  В  случае применения к  идентификатору она  дает значение  не-ноль, если этот
идентификатор был  ранее определен  с помощью #define и после этого
не было отмены определения с помощью #undef; иначе ее значение 0.
<br>  Командная строка вида
<pre>
     #ifdef идент
</pre>  
<br>проверяет, определен  ли идентификатор  в  препроцессоре  в  данный
момент; то есть, был ли он объектом командной строки #define.
<br>  Командная строка вида
<pre>
     #ifndef идент
</pre>  
<br>проверяет, является ли идентификатор неопределенным в препроцессоре
в данный момент.
<br>  После строки  каждого из  трех видов  может  стоять  произвольное
количество строк, возможно, содержащих командную строку
<pre>
     #else
</pre>  
<br>и далее до командной строки
<pre>
     #endif
</pre>  
<br>  Если проверенное  условие истинно,  то все  строки между #else  и
#endif игнорируются.  Если проверенное условие ложно, то все строки
между проверкой  и #else  или, в  случае отсутствия  #else, #endif,
игнорируются.
<br>  Эти конструкции могут быть вложенными.
<a name=ref9_18.12.4>
<h3 align=center>    12.4 Управление строкой </h3>
<p>  Для помощи  другим препроцессорам,  генерирующим программы  на C,
строка вида
<pre>
     #line константа "имя_файла"
</pre>  
<br>заставляет  компилятор   считать,  например,  в  целях  диагностики
ошибок, что константа задает номер следующей строки исходного файла,
и   текущий    входной   файл   именуется   идентификатором.   Если
идентификатор отсутствует, то запомненное имя файла не изменяется.
<a name=ref9_18.13>
<h2 align=center>      13. Неявные Описания </h2>
<p>  См. <a HREF=REF8.HTM#ref8.1>#8.1.</a>
<a name=ref9_18.14>
<h2 align=center>         14. Обзор Типов </h2>
<p>  В этом  разделе кратко  собрано описание  действий, которые могут
совершаться над объектами различных типов.
<a name=ref9_18.14.1>
<h3 align=center>  14.1 Классы </h3>
<p>  Классовые объекты  могут присваиваться, передаваться функциям как
параметры и возвращаться функциями. Другие возможные операции, как,
например, проверка  равенства, могут быть определены пользователем;
см. <a HREF=REF8.HTM#ref8.5.10>#8.5.10.</a>
<a name=ref9_18.14.2>
<h3 align=center>    14.2 Функции </h3>
<p>  Есть только  две вещи,  которые  можно  проделывать  с  функцией:
вызывать ее  и  брать  ее  адрес.  Если  в  выражении  имя  функции
возникает не  в положении  имени функции  в вызове, то генерируется
указатель на  функцию. Так, для передачи одной функции другой можно
написать
<pre>
  typedef int (*PF) ();
  extern g (PF);
  extern f ();
  ...
  g (f);
</pre>  
<br>  Тогда определение g может иметь следующий вид:
<pre>
  g (PF funcp)
    {
      ...
      (*funcp) ();
      ...
    }
</pre>  
<br>  Заметьте, что  f должна быть описана явно в вызывающей программе,
поскольку ее появление в g(f) не сопровождалось (.
<a name=ref9_18.14.3>
<h3 align=center>   14.3 Массивы, указатели и индексирование </h3>
<p>  Всякий раз,  когда  в  выражении  появляется  идентификатор  типа
массива, он преобразуется в указатель на первый член массива. Из-за
преобразований  массивы   не  являются   адресами.  По  определению
операция индексирования  []  интерпретируется  таким  образом,  что
E1[E2]  идентично   *((E1)+(E2)).  В  силу  правил  преобразования,
применяемых к  +, если E1 массив и E2 целое, то E1[E2] относится к
E2-ому члену  E1. Поэтому, несмотря на такое проявление асимметрии,
индексирование является коммутативной операцией.
<br>  Это правило  сообразным образом применяется в случае многомерного
массива. Если  E является  n-мерным массивом  ранга i*j*...*k,   то
возникающее в выражении E преобразуется в указатель на (n-1)-мерный
массив ранга j*...*k.  Если к этому указателю, явно или неявно, как
результат индексирования,  применяется операция  *, ее  результатом
является (n-1)-мерный  массив, на  который указывалось, который сам
тут же преобразуется в указатель.
<br>  Рассмотрим, например,
<pre>
  int x[3][5];
</pre>  
<br>  Здесь x  -  массив  целых  размером  3*5.  Когда  x  возникает  в
выражении, он  преобразуется в указатель на (первый из трех) массив
из 5  целых. В  выражении  x[i],  которое  эквивалентно  *(x+1),  x
сначала  преобразуется,   как  описано,   в  указатель,   затем   1
преобразуется к  типу x,  что включает  в себя умножение 1 на длину
объекта, на  который указывает  указатель, а  именно  объект  из  5
целых. Результаты  складываются, и используется косвенная адресация
для  получения  массива  (из  5  целых),  который  в  свою  очередь
преобразуется в  указатель на  первое из  целых. Если есть еще один
индекс, снова  используется  тот же параметр; на этот раз результат
является целым.
<br>  Именно из всего этого проистекает то, что массивы в C хранятся по
строкам (быстрее  всего  изменяется  последний  индекс),  и  что  в
описании     первый  индекс   помогает  определить   объем  памяти,
поглощаемый  массивом,   но  не   играет  никакой   другой  роли  в
вычислениях индекса.
<a name=ref9_18.14.4>
<h3 align=center>   14.4 Явные преобразования указателей </h3>
<p>  Определенные преобразования,  включающие массивы, выполняются, но
имеют зависящие  от реализации  аспекты. Все они задаются с помощью
явной операции преобразования типов, см. <a HREF=REF1_7.HTM#ref1_7.7.2>##7.2</a> и <a HREF=REF8.HTM#ref8.7>8.7.</a>
<br>  Указатель может  быть  преобразован  к  любому  из  целых  типов,
достаточно больших  для его  хранения. То,  какой  из  int  и  long
требуется, является  машинно зависимым. Преобразующая функция также
является машинно  зависимой, но предполагается, что она не содержит
сюрпризов  для  того,  кто  знает  структуру  адресации  в  машине.
Подробности для некоторых конкретных машин были даны в <a HREF=REF1_7.HTM#ref1_7.2.6>#2.6.</a>
<br>  Объект целого  типа может  быть явно  преобразован  в  указатель.
Преобразующая  функция   всегда  превращает  целое,  полученное  из
указателя, обратно  в тот  же указатель,  но  в  остальных  случаях
является машинно зависимой.
<br>  Указатель на  один тип  может быть  преобразован в  указатель  на
другой тип.  Использование результирующего указателя может вызывать
особые ситуации,  если исходный  указатель не  указывает на объект,
соответствующим образом  выравненный в  памяти. Гарантируется,  что
указатель на  объект данного  размера  может  быть  преобразован  в
указатель на объект меньшего размера и обратно без изменений.
<br>Например, программа,  выделяющая память, может получать размер (в
байтах) размещаемого  объекта и  возвращать указатель  на char; это
можно использовать следующим образом.
<pre>
  extern void* alloc ();
  double* dp;
  dp = (double*) alloc (sizeof (double));
  *dp= 22.0 / 7.0;
</pre>  
<br>alloc   должна обеспечивать  (машинно зависимым  образом)  то,  что
возвращаемое ею значение подходит для преобразования в указатель на
double;   в этом  случае использование  функции мобильно. Различные
машины различаются  по числу  бит  в  указателях  и  требованиям  к
выравниванию объектов.  Составные объекты  выравниваются  по  самой
строгой границе, требуемой каким-либо из его составляющих.
<a name=ref9_18.15>
<h2 align=center>               15. Константные Выражения </h2>
<p>  В нескольких  местах C++  требует выражения,  вычисление  которых
дает  константу:   в  качестве   границы  массива  (<a HREF=REF8.HTM#ref8.3>#8.3</a>),  в  case выражениях  (<a HREF=#ref9_18.9.7>#9.7</a>),   в  качестве   значений  параметров   функции, присваиваемых по  умолчанию, (<a HREF=REF8.HTM#ref8.3>#8.3</a>),  и в инициализаторах (<a HREF=REF8.HTM#ref8.6>#8.6</a>). В первом случае  выражение может  включать  только  целые  константы,
символьные константы,  константы, описанные  как  имена,  и  sizeof
выражения, возможно, связанные бинарными операциями
<pre>
   + - * / % & | ^ << >> == != < > <= >= && ||
</pre>  
<br> или унарными операциями
<pre>
  - ~ !
</pre>  
<br>или тернарными операциями
<pre>
  ? :
</pre>  
<br>  Скобки могут  использоваться для  группирования, но не для вызова
функций.
<br>  Большая   широта    допустима   для    остальных   трех   случаев
использования; помимо  константных выражений,  обсуждавшихся  выше,
допускаются константы  с плавающей  точкой, и можно также применять
унарную операцию  & к  внешним  или  статическим  объектам,  или  к
внешним  или   статическим  массивам,  индексированным  константным
выражением. Унарная  операция & может также быть применена неявно с
помощью употребления неиндексированных массивов и функций. Основное
правило состоит  в том,  что инициализаторы  должны при  вычислении
давать  константу   или  адрес   ранее  описанного   внешнего   или
статического объекта плюс или минус константа.
<br.  Меньшая широта  допустима для  константных выражений  после  #if:
константы, описанные  как имена,  sizeof выражения  и  перечислимые
константы недопустимы.
<a name=ref9_18.16>
<h2 align=center>          16. Соображения Мобильности </h2>
<p>  Определенные части C++ являются машинно зависимыми по своей сути.
Следующий ниже  список мест  возможных затруднений не претендует на
полноту, но может указать на основные из них.
<br>  Как показала  практика, характеристики  аппаратуры в чистом виде,
такие, как  размер слова,  свойства плавающей  арифметики и  целого
деления, не  создают  особых  проблем.  Другие  аппаратные  аспекты
отражаются на  различных программных разработках. Некоторые из них,
особенно знаковое расширение (преобразование отрицательного символа
в отрицательное  целое) и  порядок  расположения  байтов  в  слове,
являются досадными  помехами, за  которыми надо  тщательно следить.
Большинство других являются всего лишь мелкими сложностями.
<br>  Число  регистровых  переменных,  которые  фактически  могут  быть
помещены  в  регистры,  различается  от  машины  к  машине,  как  и
множество фактических  типов. Тем  не  менее,  все  компиляторы  на
"своей" машине  все делают  правильно; избыточные или недействующие
описания register игнорируются.
<br>  Некоторые сложности  возникают  при  использовании  двусмысленной
манеры программирования.  Писать программы, зависящие от какой-либо
из этих особенностей, районе неблагоразумно.
<br>  В языке  не определен порядок  вычисления параметров  функции.  На
некоторых машинах  он слева  направо, а на некоторых справа налево.
Порядок    появления     некоторых    побочных     эффектов    также
недетерминирован.
<br>  Поскольку  символьные   константы  в   действительности  являются
объектами  типа   int,  то  могут  быть  допустимы  многосимвольные
константы. Однако  конкретная реализация  очень сильно  зависит  от
машины, поскольку  порядок, в  котором символы присваиваются слову,
различается от  машины к  машине. На некоторых машинах поля в слове
присваиваются слева направо, на других справа налево.
<br>  Эти различия  невидны для отдельных программ, не позволяющих себе
каламбуров с  типами (например, преобразования int указателя в char
указатель и  просмотр памяти,  на которую  указывает указатель), но
должны приниматься во внимание при согласовании внешне предписанных
форматов памяти.
<a name=ref9_18.17>
<h2 align=center>           17. Свободная Память </h2>
<p>  Операция new (<a HREF=REF1_7.HTM#ref1_7.7.2>#7.2</a>) вызывает функцию
<pre>
  extern void* _new (long);
</pre>  
<br>для получения  памяти.  Параметр  задает  число  требуемых  байтов.
Память будет  инициализирована. Если  _new не может найти требуемое
количество памяти, то она возвращает ноль.
<br>  Операция delete вызывает функцию
<pre>
   extern void _delete (void*);
</pre>  
<br>чтобы  освободить  память,  указанную  указателем,  для  повторного
использования. Результат  вызова _delete()   для указателя, который
не был  получен из  _new(),  не определен,  это  же  относится  и  к
повторному вызову  _delete() для одного и того же указателя. Однако
уничтожение с помощью delete указателя со значением ноль безвредно.
<br>Предоставляются  стандартные   версии  _new()   и  _delete(),  но
пользователь  может   применять  другие,   более   подходящие   для
конкретных приложений.
<br>  Когда с  помощью операции  new создается классовый объект, то для
получения   необходимой    памяти   конструктор    будет   (неявно)
использовать new.  Конструктор может  осуществить свое  собственное
резервирование памяти  посредством присваивания  указателю this  до
каких-либо использований. С помощью присваивания this значения ноль
деструктор может  избежать  стандартной  операции  дерезервирования
памяти для объекта его класса. Например:
<pre>
  class cl
    {
      int v[10];
      cl () { this = my_own_allocator (sizeof (cl)); }
      ~cl () { my_own_deallocator (this); this = 0; }
    }
</pre>  
<br>  На  входе   в   конструктор   this   является   не-нулем,   если
резервирование памяти  уже имело  место (как  это имеет  место  для
автоматических объектов), и нулем в остальных случаях.
<br>  Если производный  класс осуществляет  присваивание this, то вызов
конструктора (если он есть) базового класса будет иметь место после
присваивания, так  что конструктор  базового  класса  ссылаться  на
объект   посредством   конструктора   производного   класса.   Если
конструктор базового  класса  осуществляет  присваивание  this,  то
значение также  будет использоваться  конструктором  (если  таковой
есть)  производного класса.
<a name=ref9_18.18>
<h2 align=center>        18. Краткое Изложение Синтаксиса </h2>
<p> Мы надеемся,  что эта  краткая сводка  синтаксиса    C++  поможет
пониманию. Она не является точным изложением языка.
<a name=ref9_18.18.1>
<h3 align=center>   18.1 Выражения </h3>
<pre>
     выражение:
          терм
          выражение           бинарная_операция           выражение
          выражение       ?       выражение       :       выражение
          список_выражений
     терм:
          первичный
          *                                                    терм
          &                                                    терм
          -                                                    терм
          !                                                    терм
          ~                                                    терм
          ++терм
          --терм
          терм++
          терм--
          (                   имя_типа)                   выражение
          имя_простого_типа           (           список_выражений)
          sizeof                                          выражение
          sizeof             (              имя_типа              )
          new                                              имя_типа
          new ( имя_типа )
     первичный:
          id
          ::                                          идентификатор
          константа
          строка
          this
          (                       выражение                       )
          первичный[                  выражение                   ]
          первичный      (       список_выражений       opt       )
          первичный.id
          первичный->id
     id:
          идентификатор
          typedef-имя :: идентификатор
     список_выражений:
          выражение
          список_выражений, выражение
     операция:
          унарная_операция
          бинарная_операция
          специальная_операция
  Бинарные операции имеют приоритет, убывающий в указанном порядке:
     бинарная_операция:
          *                          /                            %
          +                                                       -
          <<                                                     >>
          <                                                       >
          ==                                                     !=
          &
          ^
          |
          &&
          ||
          =   +=  -=  *=  /=  %=  ^=  &=  |=  >>=  <<=
                                                  унарная_операция:
           *   &   -   ~   !   ++   --
     специальная_операция:
          ()       []
     имя_типа:
          спецификаторы_описания абстрактный_описатель
     абстрактный_описатель:
          пустой
          *                                   абстрактный_описатель
          абстрактный_описатель  (   список_описаний_параметров   )
          абстрактный_описатель  [   константное_выражение  opt   ]
          ( абстрактный_описатель )
     простое_имя_типа:
          typedef-имя
          char
          short
          int
          long
          unsigned
          float
          double
     typedef-имя:
          идентификатор
</pre>
<a name=ref9_18.18.2>
<h3 align=center>    18.2 Описания </h3>
<pre>
     описание:
          спецификаторы_описания  opt   список_описателей   opt   ;
          описание_имени
          asm-описание
     описание_имени:
          агрег                   идентификатор                   ;
          enum  идентификатор ;
     агрег:
          class
          struct
          union
     asm-описание:
          asm ( строка );
     спецификаторы_описания:
          спецификатор_описания спецификатор_описания opt
     спецификатор_описания:
          имя_простого_типа
          спецификатор_класса
          enum_спецификатор
          sc_спецификатор
          фнк_спецификатор
          typedef
          friend
          const
          void
     sc_спецификатор:
          auto
          extern
          register
          static
     фнк-спецификатор:
          inline
          overload
          virtual
     список_описателей:
          иниц-описатель
          иниц-описатель , список_описателей
     иниц-описатель:
          описатель инициализатор opt
     описатель:
          оп_имя
          (                       описатель                       )
          *             const             opt             описатель
          &             const             opt             описатель
          описатель      (       список_описаний_параметров       )
          описатель [ константное_выражение opt ]
     оп_имя:
          простое_оп_имя
          typedef-имя . простое_оп_имя
     простое_оп_имя:
          идентификатор
          typedef-имя
          -                                             typedef-имя
          имя_функции_операции
     имя_функции_операции:
          операция операция
     список_описаний_параметров:
          список_описаний_прм opt ... opt
     список_описаний_прм                                          :
          список_описаний_прм         ,          описание_параметра
          описание_параметра
     описание_параметра:
          спецификаторы_описания                          описатель
          спецификаторы_описания описатель = константное_выражение
     спецификатор_класса:
          заголовок_класса       {список_членов        opt        }
          заголовок_класса    {список_членов     opt    public    :
     список_членов opt }
     заголовок_класса                                             :
          агрег                  идентификатор                  opt
          агрег идентификатор opt : public opt typedef-имя
     список_членов                                                :
          описание_члена список_членов opt
     описание_члена:
          спецификаторы_описания opt описатель_члена ;
     описатель_члена:
          описатель
          идентификатор opt : константное_выражение
     инициализатор:
          =                                               выражение
          =                {                список_инициализаторов}
          =       {        список_инициализаторов,                }
          (список_выражений )
     список_инициализаторов                                       :
          выражение
          список_инициализаторов        ,    список_инициализаторов
          { список_инициализаторов }
     enum-спецификатор:
          enum идентификатор opt { enum-список }
     enum-список:
          перечислитель
          enum-список , перечислитель
     перечислитель:
          идентификатор
          идентификатор = константное_выражение
</pre>
<a name=ref9_18.18.3>
<h3 align=center>  18.3 Операторы </h3>
<pre>
     составной_оператор:
          { список_описаний opt список_операторов opt }
     список_описаний:
          описание
          описание список_описаний
     список_операторов:
          оператор
          оператор список_операторов
     оператор:
          выражение                                               ;
          if         (         выражение         )         оператор
          if    (    выражение    )    оператор    else    оператор
          while        (         выражение        )        оператор
          do     оператор     while     (     выражение     )     ;
          for (  выражение opt  ; выражение  opt ;  выражение opt )
               оператор
          switch        (        выражение        )        оператор
          case      константное      выражение      :      оператор
          default                    :                     оператор
          break;
          continue;
          return            выражение             opt             ;
          goto                   идентификатор                    ;
          идентификатор                 :                  оператор
          delete                    выражение                     ;
          asm           (            строка           )           ;
          ;
</pre>
<a name=ref9_18.18.4>
<h3 align=center>   18.4 Внешние определения </h3>
<pre>
     программа:
          внешнее_определение
          внешнее_определение программа
     внешнее_определение:
          определение_функции
          описание
     определение_функции:
          спецификаторы_описания       opt        описатель_функции
     инициализатор_базового_класса opt тело_функции
     описатель_функции:
          описатель ( список_описаний_параметров)
     тело_функции:
          составной_оператор
     инициализатор_базового_класса:
          : ( список_параметров opt )
</pre>
<a name=ref9_18.18.5>
<h3 align=center>   18.5 Препроцессор </h3>
<pre>
     #define идент строка_символов
     #define идент( идент,...,идент ) строка символов
     #else
     #endif
     #if выражение
     #ifdef идент
     #ifndef идент
     #include "имя_файла"
     #include <имя_файла>
     #line константа "имя_файла"
     #undef идент
</pre>
<a name=ref9_18.19>
<h2 align=center>        19. Отличия от "старого C" </h2>
<a name=ref9_18.19.1>
<h3 align=center>     19.1 Расширения </h3>
<p>  Типы  параметров   функции  могут  быть  заданы  (<a HREF=REF8.HTM#ref8.4>#8.4</a>)  и  будут проверяться (<a HREF=REF1_7.HTM#ref1_7.7.1>#7.1</a>). Могут выполняться преобразования типов.
<br>  Для выражений  с числами  с плавающей точкой может использоваться
плавающая арифметика одинарной точности; <a HREF=REF1_7.HTM#ref1_7.6.2>#6.2.</a>
<br>  Имена функций могут быть перегружены; <a HREF=REF8.HTM#ref8.6>#8.6</a>
<br>  Операции могут быть перегружены; <a HREF=REF1_7.HTM#ref1_7.7.16>#7.16</a>, <a HREF=REF8.HTM#ref8.5.10>#8.5.10.</a>
<br>  Может осуществляться inline-подстановка функций; <a HREF=REF8.HTM#ref8.1>#8.1.</a>
<br>  Объекты данных могут быть константными (const); <a HREF=REF8.HTM#ref8.3>#8.3.</a>
<br>  Могут быть описаны объекты ссылочного типа; <a HREF=REF8.HTM#ref8.3>#8.3</a>, <a HREF=REF8.HTM#ref8.6.3>#8.6.3</a>
<br>  Операции new  и delete  обеспечивают свободное хранение в памяти;
#17.
<br>  Класс может обеспечивать скрытые данные (<a HREF=REF8.HTM#ref8.5.8>#8.5.8</a>), гарантированную инициализацию (<a HREF=REF8.HTM#ref8.6.2>#8.6.2</a>),  определяемые  пользователем  преобразования (<a HREF=REF8.HTM#ref8.5.6>#8.5.6</a>),  и   динамическое  задание   типов  через   использование виртуальных функций (<a HREF=REF8.HTM#ref8.5.4>#8.5.4</a>).
<br>  Имя класса является именем типа; <a HREF=REF8.HTM#ref8.5>#8.5.</a>
<br>  Любой  указатель   может  присваиваться   [указателю]  void*  без
приведения типов; <a HREF=REF1_7.HTM#ref1_7.7.14>#7.14.</a>
<p> <center> <font size="-1">
[<a href="REF8.HTM">Назад</a>]
[<a href="AGLAV.HTM">Содержание</a>]
</font> 
<table cellspacing=0 cellpadding=0 border=0 background="../../PICTURES/MENU/FOOTER0.JPG" width="100%">
<tr><td align="center">
<table cellspacing=0 cellpadding=4 border=0 width="100%" background="">
<tr><td align="right" valign="top" width="33%">
<font size="-2">Comments: <a class="plain" href="mailto:info@citmgu.ru?Subject='From bottom of CIT FORUM local copy'">info@citmgu.ru</a><br>
Designed by <a class="plain" href="mailto:andrey@novikov.com">Andrey Novikov</a><br>
Copyright &copy; <a class="plain" href="http://www.citmgu.ru/">CIT</a></font>
</td></tr>
</table>
</td></tr>
</table></body></html>
